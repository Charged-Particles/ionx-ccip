{
  "address": "0xE545fe256F8AFB1591FA7F5891d5e3de730c077C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BridgeAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAddressIsZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DestinationTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "destinationToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DestinationTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "extraArgs",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ExtraArgsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RemoteBridgeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "remoteBridge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RemoteBridgeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "TokenPoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "TokenPoolSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "sourceChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getConfigIn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "senderBridge",
              "type": "address"
            },
            {
              "internalType": "contract IPool",
              "name": "pool",
              "type": "address"
            }
          ],
          "internalType": "struct IConfiguration.ConfigIn",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getConfigOut",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiverBridge",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "destinationToken",
              "type": "address"
            },
            {
              "internalType": "contract IPool",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct IConfiguration.ConfigOut",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getDestinationToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "destinationToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getExtraArgs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "extraArgs",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "getRemoteBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "remoteBridge",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenPool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "isBridgeAvailableOnChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "isTokenAvailableOnDestination",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenPoolAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "removeDestinationToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "removeRemoteBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeTokenPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "sourceToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "contract IERC20",
          "name": "destinationToken",
          "type": "address"
        }
      ],
      "name": "setDestinationToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "extraArgs",
          "type": "bytes"
        }
      ],
      "name": "setExtraArgs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "setExtraArgsGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "remoteBridge",
          "type": "address"
        }
      ],
      "name": "setRemoteBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "setTokenPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaedf7724a87c8768942dbd328aede8396a7b6b4cde3e3070e8238c6b8702933a",
  "receipt": {
    "to": null,
    "from": "0x2BB8CBAd36D52708a43DE36a9Aa2782fFa0470F1",
    "contractAddress": "0xE545fe256F8AFB1591FA7F5891d5e3de730c077C",
    "transactionIndex": 1,
    "gasUsed": "1011524",
    "logsBloom": "0x
    "blockHash": "0xe68e03f2ade8535c48925f59dffcfb79edebeddf72b56fc05c81ff2756539b81",
    "transactionHash": "0xaedf7724a87c8768942dbd328aede8396a7b6b4cde3e3070e8238c6b8702933a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16997334,
        "transactionHash": "0xaedf7724a87c8768942dbd328aede8396a7b6b4cde3e3070e8238c6b8702933a",
        "address": "0xE545fe256F8AFB1591FA7F5891d5e3de730c077C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bb8cbad36d52708a43de36a9aa2782ffa0470f1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe68e03f2ade8535c48925f59dffcfb79edebeddf72b56fc05c81ff2756539b81"
      }
    ],
    "blockNumber": 16997334,
    "cumulativeGasUsed": "1055375",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fae637a45deca0005045ca74bdbaa66c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BridgeAddressIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAddressIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DestinationTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"destinationToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DestinationTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ExtraArgsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoteBridgeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteBridge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoteBridgeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenPoolSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"getConfigIn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderBridge\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct IConfiguration.ConfigIn\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"getConfigOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiverBridge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destinationToken\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct IConfiguration.ConfigOut\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"getDestinationToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"destinationToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"getExtraArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getRemoteBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"remoteBridge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"isBridgeAvailableOnChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"isTokenAvailableOnDestination\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenPoolAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"removeDestinationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"removeRemoteBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"destinationToken\",\"type\":\"address\"}],\"name\":\"setDestinationToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"name\":\"setExtraArgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"setExtraArgsGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"remoteBridge\",\"type\":\"address\"}],\"name\":\"setRemoteBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Configuration.sol\":\"Configuration\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/bridge/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IConfiguration} from \\\"../interfaces/IConfiguration.sol\\\";\\nimport {IPool} from \\\"../interfaces/IPool.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable2Step, Ownable} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\n\\ncontract Configuration is IConfiguration, Ownable2Step {\\n    mapping(uint64 => address) private s_bridges;\\n    mapping(uint64 => bytes) private s_extraArgs;\\n    mapping(IERC20 => IPool) private s_tokenPools;\\n    mapping(IERC20 => mapping(uint64 => IERC20)) private s_destinationTokens;\\n\\n    modifier validateBridgeAddress(address bridge) {\\n        if (bridge == address(0)) {\\n            revert BridgeAddressIsZero();\\n        }\\n        _;\\n    }\\n\\n    modifier validateToken(IERC20 token) {\\n        if (address(token) == address(0)) {\\n            revert TokenAddressIsZero();\\n        }\\n        _;\\n    }\\n\\n    modifier validateTokenPool(IPool pool) {\\n        if (address(pool) == address(0)) {\\n            revert PoolAddressIsZero();\\n        }\\n        _;\\n    }\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    function setRemoteBridge(\\n        uint64 chainSelector,\\n        address remoteBridge\\n    ) external onlyOwner validateBridgeAddress(remoteBridge) {\\n        s_bridges[chainSelector] = remoteBridge;\\n        emit RemoteBridgeSet(chainSelector, remoteBridge, msg.sender);\\n    }\\n\\n    function removeRemoteBridge(uint64 chainSelector) external onlyOwner {\\n        delete s_bridges[chainSelector];\\n        emit RemoteBridgeRemoved(chainSelector, msg.sender);\\n    }\\n\\n    function setExtraArgsGasLimit(\\n      uint64 destinationChainSelector,\\n      uint256 gasLimit\\n    ) external onlyOwner {\\n        bytes memory extraArgs = Client._argsToBytes(Client.EVMExtraArgsV1({gasLimit: gasLimit}));\\n        s_extraArgs[destinationChainSelector] = extraArgs;\\n        emit ExtraArgsSet(destinationChainSelector, extraArgs, msg.sender);\\n    }\\n\\n    function setExtraArgs(\\n        uint64 destinationChainSelector,\\n        bytes memory extraArgs\\n    ) external onlyOwner {\\n        s_extraArgs[destinationChainSelector] = extraArgs;\\n        emit ExtraArgsSet(destinationChainSelector, extraArgs, msg.sender);\\n    }\\n\\n    function setTokenPool(\\n        IPool pool\\n    )\\n        external\\n        onlyOwner\\n        validateTokenPool(pool)\\n        validateToken(pool.getToken())\\n    {\\n        IERC20 token = pool.getToken();\\n        s_tokenPools[token] = pool;\\n        emit TokenPoolSet(token, pool, msg.sender);\\n    }\\n\\n    function removeTokenPool(IERC20 token) external onlyOwner {\\n        delete s_tokenPools[token];\\n        emit TokenPoolRemoved(token, msg.sender);\\n    }\\n\\n    function setDestinationToken(\\n        IERC20 sourceToken,\\n        uint64 destinationChainSelector,\\n        IERC20 destinationToken\\n    )\\n        external\\n        onlyOwner\\n        validateToken(sourceToken)\\n        validateToken(destinationToken)\\n    {\\n        s_destinationTokens[sourceToken][\\n            destinationChainSelector\\n        ] = destinationToken;\\n        emit DestinationTokenSet(\\n            sourceToken,\\n            destinationChainSelector,\\n            destinationToken,\\n            msg.sender\\n        );\\n    }\\n\\n    function removeDestinationToken(\\n        IERC20 sourceToken,\\n        uint64 destinationChainSelector\\n    ) external onlyOwner {\\n        delete s_destinationTokens[sourceToken][destinationChainSelector];\\n        emit DestinationTokenRemoved(\\n            sourceToken,\\n            destinationChainSelector,\\n            msg.sender\\n        );\\n    }\\n\\n    function isTokenAvailableOnDestination(\\n        IERC20 token,\\n        uint64 destinationChainSelector\\n    ) external view returns (bool available) {\\n        return\\n            address(getDestinationToken(token, destinationChainSelector)) !=\\n            address(0);\\n    }\\n\\n    function getExtraArgs(\\n        uint64 destinationChainSelector\\n    ) public view returns (bytes memory extraArgs) {\\n        return s_extraArgs[destinationChainSelector];\\n    }\\n\\n    function getTokenPool(IERC20 token) public view returns (IPool pool) {\\n        return s_tokenPools[token];\\n    }\\n\\n    function getDestinationToken(\\n        IERC20 sourceToken,\\n        uint64 destinationChainSelector\\n    ) public view returns (IERC20 destinationToken) {\\n        return s_destinationTokens[sourceToken][destinationChainSelector];\\n    }\\n\\n    function isBridgeAvailableOnChain(\\n        uint64 chainSelector\\n    ) public view returns (bool available) {\\n        return getRemoteBridge(chainSelector) != address(0);\\n    }\\n\\n    function getRemoteBridge(\\n        uint64 chainSelector\\n    ) public view returns (address remoteBridge) {\\n        return s_bridges[chainSelector];\\n    }\\n\\n    function isTokenPoolAvailable(\\n        IERC20 token\\n    ) public view returns (bool available) {\\n        return address(getTokenPool(token)) != address(0);\\n    }\\n\\n    function getConfigOut(\\n        IERC20 token,\\n        uint64 destinationChainSelector\\n    ) external view returns (ConfigOut memory config) {\\n        config = ConfigOut({\\n            receiverBridge: getRemoteBridge(destinationChainSelector),\\n            destinationToken: getDestinationToken(\\n                token,\\n                destinationChainSelector\\n            ),\\n            extraArgs: getExtraArgs(destinationChainSelector),\\n            pool: getTokenPool(token)\\n        });\\n    }\\n\\n    function getConfigIn(\\n        IERC20 token,\\n        uint64 sourceChainSelector\\n    ) external view returns (ConfigIn memory config) {\\n        config = ConfigIn({\\n            senderBridge: getRemoteBridge(sourceChainSelector),\\n            pool: getTokenPool(token)\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0xd4083400c5d53dd901ef5419ff74ebf48921112a2f4d8ae4b1aed70f1085f09d\",\"license\":\"MIT\"},\"contracts/interfaces/IConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IPool} from \\\"../interfaces/IPool.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConfiguration {\\n    struct ConfigOut {\\n        address receiverBridge;\\n        IERC20 destinationToken;\\n        IPool pool;\\n        bytes extraArgs;\\n    }\\n\\n    struct ConfigIn {\\n        address senderBridge;\\n        IPool pool;\\n    }\\n\\n    event RemoteBridgeSet(\\n        uint64 indexed chainSelector,\\n        address indexed remoteBridge,\\n        address indexed owner\\n    );\\n\\n    event RemoteBridgeRemoved(\\n        uint64 indexed chainSelector,\\n        address indexed owner\\n    );\\n\\n    event ExtraArgsSet(\\n        uint64 indexed destinationChainSelector,\\n        bytes extraArgs,\\n        address indexed owner\\n    );\\n\\n    event DestinationTokenSet(\\n        IERC20 indexed sourceToken,\\n        uint64 indexed destinationChainSelector,\\n        IERC20 destinationToken,\\n        address indexed owner\\n    );\\n\\n    event DestinationTokenRemoved(\\n        IERC20 indexed sourceToken,\\n        uint64 indexed destinationChainSelector,\\n        address indexed owner\\n    );\\n\\n    event TokenPoolSet(\\n        IERC20 indexed token,\\n        IPool indexed pool,\\n        address indexed owner\\n    );\\n    event TokenPoolRemoved(IERC20 indexed token, address indexed owner);\\n\\n    error PoolAddressIsZero();\\n    error TokenAddressIsZero();\\n    error BridgeAddressIsZero();\\n\\n    function setRemoteBridge(\\n        uint64 chainSelector,\\n        address remoteBridge\\n    ) external;\\n\\n    function removeRemoteBridge(uint64 chainSelector) external;\\n\\n    function setExtraArgs(\\n        uint64 destinationChainSelector,\\n        bytes memory extraArgs\\n    ) external;\\n\\n    function setTokenPool(IPool pool) external;\\n\\n    function removeTokenPool(IERC20 token) external;\\n\\n    function setDestinationToken(\\n        IERC20 sourceToken,\\n        uint64 destinationChainSelector,\\n        IERC20 destinationToken\\n    ) external;\\n\\n    function removeDestinationToken(\\n        IERC20 sourceToken,\\n        uint64 destinationChainSelector\\n    ) external;\\n\\n    function isTokenAvailableOnDestination(\\n        IERC20 token,\\n        uint64 destinationChainSelector\\n    ) external view returns (bool available);\\n\\n    function isBridgeAvailableOnChain(\\n        uint64 chainSelector\\n    ) external view returns (bool available);\\n\\n    function getRemoteBridge(\\n        uint64 chainSelector\\n    ) external view returns (address remoteBridge);\\n\\n    function getExtraArgs(\\n        uint64 destinationChainSelector\\n    ) external view returns (bytes memory extraArgs);\\n\\n    function getTokenPool(IERC20 token) external view returns (IPool pool);\\n\\n    function getDestinationToken(\\n        IERC20 sourceToken,\\n        uint64 destinationChainSelector\\n    ) external view returns (IERC20 destinationToken);\\n\\n    function isTokenPoolAvailable(\\n        IERC20 token\\n    ) external view returns (bool available);\\n\\n    function getConfigOut(\\n        IERC20 token,\\n        uint64 destinationChainSelector\\n    ) external view returns (ConfigOut memory config);\\n\\n    function getConfigIn(\\n        IERC20 token,\\n        uint64 sourceChainSelector\\n    ) external view returns (ConfigIn memory config);\\n}\\n\",\"keccak256\":\"0x51b114cfb6cafccd12884fa30ba77a99dd8c89175ee4cb6247a89274efcc9cd4\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPool {\\n    event BridgeSet(\\n        address indexed oldBridge,\\n        address indexed newBridge,\\n        address indexed owner\\n    );\\n    event Locked(address indexed sender, uint256 amount);\\n    event Burned(address indexed sender, uint256 amount);\\n    event Released(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n    event Minted(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    error NoMoreLiquidity(uint256 amountoRelease, uint256 liquidity);\\n\\n    error IsNotBridge(address caller, address bridge);\\n\\n    error BridgeAddressZero();\\n\\n    enum TokenPoolType {\\n        LockRelease,\\n        BurnMint\\n    }\\n\\n    /**\\n     * @notice Locks or burns the amount of tokens.\\n     * @notice The caller must have the role of locker for LockRelease token pool or burner for BurnMint token pool.\\n     * @param amount The amount of tokens to lock or burn\\n     */\\n    function lockOrBurn(uint256 amount) external;\\n\\n    /**\\n     * @notice Releases or mints the amount of tokens.\\n     * @notice The caller must have the role of unlocker for LockRelease token pool or minter for BurnMint token pool.\\n     * @dev For LockRelease token pool, if the pool is out of liquidity, it reverts.\\n     * @param amount The amount of tokens to release or mint\\n     * @param receiver The address to receive the released or minted tokens\\n     */\\n    function releaseOrMint(uint256 amount, address receiver) external;\\n\\n    /**\\n     * @notice Returns the token of the pool.\\n     * @return token The token of the pool\\n     */\\n    function getToken() external view returns (IERC20 token);\\n\\n    /**\\n     * @notice Returns the type of the token pool.\\n     * @return tokenPoolType The type of the token pool\\n     */\\n    function getTokenPoolType()\\n        external\\n        view\\n        returns (TokenPoolType tokenPoolType);\\n\\n    /**\\n     * @notice Sets `account` as the bridge. Only callable by the owner.\\n     * @dev Emits the `BridgeSet` event upon success.\\n     * @param account The account to set as the bridge.\\n     */\\n    function setBridge(address account) external;\\n\\n    /**\\n     * @notice Removes the bridge. Only callable by the owner.\\n     * @dev Emits the `BridgeSet` event with bridge as 0 address upon success.\\n     */\\n    function removeBridge() external;\\n\\n    /**\\n     * @notice Returns the bridge address.\\n     * @return bridge The bridge address\\n     */\\n    function getBridge() external view returns (address bridge);\\n}\\n\",\"keccak256\":\"0xdc2effe1d1869835cd8368e4185d20d83701f9daa60dab02bb42f6ea0a7d7ad4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/bridge/Configuration.sol:Configuration",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/bridge/Configuration.sol:Configuration",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6809,
        "contract": "contracts/bridge/Configuration.sol:Configuration",
        "label": "s_bridges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_address)"
      },
      {
        "astId": 6813,
        "contract": "contracts/bridge/Configuration.sol:Configuration",
        "label": "s_extraArgs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_bytes_storage)"
      },
      {
        "astId": 6819,
        "contract": "contracts/bridge/Configuration.sol:Configuration",
        "label": "s_tokenPools",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)1207,t_contract(IPool)7983)"
      },
      {
        "astId": 6827,
        "contract": "contracts/bridge/Configuration.sol:Configuration",
        "label": "s_destinationTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_contract(IERC20)1207,t_mapping(t_uint64,t_contract(IERC20)1207))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1207": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)7983": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)1207,t_contract(IPool)7983)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1207",
        "label": "mapping(contract IERC20 => contract IPool)",
        "numberOfBytes": "32",
        "value": "t_contract(IPool)7983"
      },
      "t_mapping(t_contract(IERC20)1207,t_mapping(t_uint64,t_contract(IERC20)1207))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1207",
        "label": "mapping(contract IERC20 => mapping(uint64 => contract IERC20))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_contract(IERC20)1207)"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint64,t_contract(IERC20)1207)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => contract IERC20)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20)1207"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}