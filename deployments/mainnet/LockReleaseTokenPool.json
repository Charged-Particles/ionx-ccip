{
  "address": "0x0a0e8d008Ac240D0d4893638edD7131991207673",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "IsNotBridge",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "IsNotLiquidityProvider",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidityProviderAddressZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "NoAmountToLock",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountoRelease",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "NoMoreLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldBridge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBridge",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "BridgeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldLiquidityProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newLiquidityProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LiquidityProviderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPoolType",
      "outputs": [
        {
          "internalType": "enum IPool.TokenPoolType",
          "name": "tokenPoolType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockOrBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "releaseOrMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_cachedLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "setLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1feea1f844f5506488eb83037ce230cbf8352518a5edb40962b164af37c460b",
  "receipt": {
    "to": null,
    "from": "0xb8D175F16742395F530e0b3bC1d30BD06B78CdA9",
    "contractAddress": "0x0a0e8d008Ac240D0d4893638edD7131991207673",
    "transactionIndex": 84,
    "gasUsed": "941602",
    "logsBloom": "0x000000000000000000000000000000000000004000000000008000000000000000000000000000000000400000000000000000000000000000000000008000000000000000000000000000000000000001010000000000000000000000000000000000000200000000000000000008000000000000000000008000000000204000000000000000000000000208000000000000000000000000000000000000000000002000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000004000a0000000000000000000000000000000000000010000000000000000010002000000",
    "blockHash": "0xd6179d0de0fb3f49fc8f047ad31765a9c87c694e2d3bb216d546c54aa52d6544",
    "transactionHash": "0xb1feea1f844f5506488eb83037ce230cbf8352518a5edb40962b164af37c460b",
    "logs": [
      {
        "transactionIndex": 84,
        "blockNumber": 20422455,
        "transactionHash": "0xb1feea1f844f5506488eb83037ce230cbf8352518a5edb40962b164af37c460b",
        "address": "0x0a0e8d008Ac240D0d4893638edD7131991207673",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b8d175f16742395f530e0b3bc1d30bd06b78cda9"
        ],
        "data": "0x",
        "logIndex": 203,
        "blockHash": "0xd6179d0de0fb3f49fc8f047ad31765a9c87c694e2d3bb216d546c54aa52d6544"
      },
      {
        "transactionIndex": 84,
        "blockNumber": 20422455,
        "transactionHash": "0xb1feea1f844f5506488eb83037ce230cbf8352518a5edb40962b164af37c460b",
        "address": "0x0a0e8d008Ac240D0d4893638edD7131991207673",
        "topics": [
          "0x89471ea472ebde5b139ae048d7199129059cd8b03c7480c88e7048ca67dde5e1",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1a159c98003fdc1d55556332ca995873ee439be",
          "0x000000000000000000000000b8d175f16742395f530e0b3bc1d30bd06b78cda9"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0xd6179d0de0fb3f49fc8f047ad31765a9c87c694e2d3bb216d546c54aa52d6544"
      },
      {
        "transactionIndex": 84,
        "blockNumber": 20422455,
        "transactionHash": "0xb1feea1f844f5506488eb83037ce230cbf8352518a5edb40962b164af37c460b",
        "address": "0x0a0e8d008Ac240D0d4893638edD7131991207673",
        "topics": [
          "0xae2f80e594729d524205a499426a28812b53809921de1259ca33dac753a92bd3",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b8d175f16742395f530e0b3bc1d30bd06b78cda9",
          "0x000000000000000000000000b8d175f16742395f530e0b3bc1d30bd06b78cda9"
        ],
        "data": "0x",
        "logIndex": 205,
        "blockHash": "0xd6179d0de0fb3f49fc8f047ad31765a9c87c694e2d3bb216d546c54aa52d6544"
      }
    ],
    "blockNumber": 20422455,
    "cumulativeGasUsed": "8436639",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x223CF0565eB33fC48861aCd1AA8b8eDacEab4024",
    "0xD1A159C98003fdc1d55556332cA995873eE439bE",
    "0xb8D175F16742395F530e0b3bC1d30BD06B78CdA9"
  ],
  "numDeployments": 1,
  "solcInputHash": "d857480a90d34cfbf00dcc818a263389",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"IsNotBridge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"IsNotLiquidityProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityProviderAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"NoAmountToLock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountoRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"NoMoreLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBridge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBridge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BridgeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LiquidityProviderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPoolType\",\"outputs\":[{\"internalType\":\"enum IPool.TokenPoolType\",\"name\":\"tokenPoolType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockOrBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"releaseOrMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_cachedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"setLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"getAvailableLiquidity()\":{\"returns\":{\"liquidity\":\"The available liquidity in the pool\"}},\"getBridge()\":{\"returns\":{\"bridge\":\"The bridge address\"}},\"getLiquidityProvider()\":{\"returns\":{\"liquidityProvider\":\"The liquidity provider address\"}},\"getToken()\":{\"returns\":{\"token\":\"The token of the pool\"}},\"getTokenPoolType()\":{\"returns\":{\"tokenPoolType\":\"The type of the token pool\"}},\"lockOrBurn(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to lock or burn\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"provideLiquidity(uint256)\":{\"details\":\"Should transfer the liquidity from the sender to the pool. Emit LiquidityProvided event\",\"params\":{\"amount\":\"The amount of liquidity to provide\"}},\"releaseOrMint(uint256,address)\":{\"details\":\"For LockRelease token pool, if the pool is out of liquidity, it reverts.\",\"params\":{\"amount\":\"The amount of tokens to release or mint\",\"receiver\":\"The address to receive the released or minted tokens\"}},\"removeBridge()\":{\"details\":\"Emits the `BridgeSet` event with bridge as 0 address upon success.\"},\"removeLiquidityProvider()\":{\"details\":\"Emits the `LiquidityProviderSet` event with liquidityProvider as 0 address upon success.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBridge(address)\":{\"details\":\"Emits the `BridgeSet` event upon success.\",\"params\":{\"account\":\"The account to set as the bridge.\"}},\"setLiquidityProvider(address)\":{\"details\":\"Emits the `LiquidityProviderSet` event upon success.\",\"params\":{\"account\":\"The account to add as liquidity provider.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"withdrawLiquidity(uint256)\":{\"details\":\"Should transfer the liquidity from the pool to the sender. Emit LiquidityWithdrawn event\",\"params\":{\"amount\":\"The amount of liquidity to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAvailableLiquidity()\":{\"notice\":\"Returns the available liquidity in the pool.\"},\"getBridge()\":{\"notice\":\"Returns the bridge address.\"},\"getLiquidityProvider()\":{\"notice\":\"Returns the liquidity provider.\"},\"getToken()\":{\"notice\":\"Returns the token of the pool.\"},\"getTokenPoolType()\":{\"notice\":\"Returns the type of the token pool.\"},\"lockOrBurn(uint256)\":{\"notice\":\"Locks or burns the amount of tokens.The caller must have the role of locker for LockRelease token pool or burner for BurnMint token pool.\"},\"provideLiquidity(uint256)\":{\"notice\":\"/**Provides liquidity to the pool. Can only be called by a liquidity provider\"},\"releaseOrMint(uint256,address)\":{\"notice\":\"Releases or mints the amount of tokens.The caller must have the role of unlocker for LockRelease token pool or minter for BurnMint token pool.\"},\"removeBridge()\":{\"notice\":\"Removes the bridge. Only callable by the owner.\"},\"removeLiquidityProvider()\":{\"notice\":\"Removes current liquidity provider. Only callable by the owner.\"},\"setBridge(address)\":{\"notice\":\"Sets `account` as the bridge. Only callable by the owner.\"},\"setLiquidityProvider(address)\":{\"notice\":\"Set `account` as a liquidity provider. Only callable by the owner.\"},\"withdrawLiquidity(uint256)\":{\"notice\":\"Withdraws liquidity from the pool. Can only be called by a liquidity provider\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/LockReleaseTokenPool.sol\":\"LockReleaseTokenPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/interfaces/ILockReleaseTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILockReleaseTokenPool {\\n    event LiquidityProvided(address indexed provider, uint256 amount);\\n    event LiquidityWithdrawn(address indexed provider, uint256 amount);\\n    event LiquidityProviderSet(\\n        address indexed oldLiquidityProvider,\\n        address indexed newLiquidityProvider,\\n        address indexed owner\\n    );\\n\\n    error NoAmountToLock(uint256 amount, address bridge);\\n    error IsNotLiquidityProvider(address account, address liquidityProvider);\\n    error LiquidityProviderAddressZero();\\n\\n    /**\\n     * @notice Returns the liquidity provider.\\n     * @return liquidityProvider The liquidity provider address\\n     */\\n    function getLiquidityProvider()\\n        external\\n        view\\n        returns (address liquidityProvider);\\n\\n    /**\\n     * @notice Returns the available liquidity in the pool.\\n     * @return liquidity The available liquidity in the pool\\n     */\\n    function getAvailableLiquidity() external view returns (uint256 liquidity);\\n\\n    /**\\n     * @notice Set `account` as a liquidity provider. Only callable by the owner.\\n     * @dev Emits the `LiquidityProviderSet` event upon success.\\n     * @param account The account to add as liquidity provider.\\n     */\\n\\n    function setLiquidityProvider(address account) external;\\n\\n    /**\\n     * @notice Removes current liquidity provider. Only callable by the owner.\\n     * @dev Emits the `LiquidityProviderSet` event with liquidityProvider as 0 address upon success.\\n     */\\n    function removeLiquidityProvider() external;\\n\\n    /**\\n\\n    /**\\n     * @notice Provides liquidity to the pool. Can only be called by a liquidity provider\\n     * @dev Should transfer the liquidity from the sender to the pool. Emit LiquidityProvided event\\n     * @param amount The amount of liquidity to provide\\n     */\\n    function provideLiquidity(uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws liquidity from the pool. Can only be called by a liquidity provider\\n     * @dev Should transfer the liquidity from the pool to the sender. Emit LiquidityWithdrawn event\\n     * @param amount The amount of liquidity to withdraw\\n     */\\n    function withdrawLiquidity(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x84459b7843b9e2f4317518f29fdaf54302a65d6cc1f3a1a4195c560cc79c7887\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPool {\\n    event BridgeSet(\\n        address indexed oldBridge,\\n        address indexed newBridge,\\n        address indexed owner\\n    );\\n    event Locked(address indexed sender, uint256 amount);\\n    event Burned(address indexed sender, uint256 amount);\\n    event Released(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n    event Minted(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    error NoMoreLiquidity(uint256 amountoRelease, uint256 liquidity);\\n\\n    error IsNotBridge(address caller, address bridge);\\n\\n    error BridgeAddressZero();\\n\\n    enum TokenPoolType {\\n        LockRelease,\\n        BurnMint\\n    }\\n\\n    /**\\n     * @notice Locks or burns the amount of tokens.\\n     * @notice The caller must have the role of locker for LockRelease token pool or burner for BurnMint token pool.\\n     * @param amount The amount of tokens to lock or burn\\n     */\\n    function lockOrBurn(uint256 amount) external;\\n\\n    /**\\n     * @notice Releases or mints the amount of tokens.\\n     * @notice The caller must have the role of unlocker for LockRelease token pool or minter for BurnMint token pool.\\n     * @dev For LockRelease token pool, if the pool is out of liquidity, it reverts.\\n     * @param amount The amount of tokens to release or mint\\n     * @param receiver The address to receive the released or minted tokens\\n     */\\n    function releaseOrMint(uint256 amount, address receiver) external;\\n\\n    /**\\n     * @notice Returns the token of the pool.\\n     * @return token The token of the pool\\n     */\\n    function getToken() external view returns (IERC20 token);\\n\\n    /**\\n     * @notice Returns the type of the token pool.\\n     * @return tokenPoolType The type of the token pool\\n     */\\n    function getTokenPoolType()\\n        external\\n        view\\n        returns (TokenPoolType tokenPoolType);\\n\\n    /**\\n     * @notice Sets `account` as the bridge. Only callable by the owner.\\n     * @dev Emits the `BridgeSet` event upon success.\\n     * @param account The account to set as the bridge.\\n     */\\n    function setBridge(address account) external;\\n\\n    /**\\n     * @notice Removes the bridge. Only callable by the owner.\\n     * @dev Emits the `BridgeSet` event with bridge as 0 address upon success.\\n     */\\n    function removeBridge() external;\\n\\n    /**\\n     * @notice Returns the bridge address.\\n     * @return bridge The bridge address\\n     */\\n    function getBridge() external view returns (address bridge);\\n}\\n\",\"keccak256\":\"0xdc2effe1d1869835cd8368e4185d20d83701f9daa60dab02bb42f6ea0a7d7ad4\",\"license\":\"MIT\"},\"contracts/pools/LockReleaseTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {ILockReleaseTokenPool} from \\\"../interfaces/ILockReleaseTokenPool.sol\\\";\\nimport {Pool} from \\\"./Pool.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract LockReleaseTokenPool is ILockReleaseTokenPool, Pool {\\n    using SafeERC20 for IERC20;\\n\\n    address private s_liquidityProvider;\\n    uint256 public s_cachedLiquidity;\\n\\n    modifier onlyLiquidityProvider() {\\n        if (msg.sender != s_liquidityProvider) {\\n            revert IsNotLiquidityProvider(msg.sender, s_liquidityProvider);\\n        }\\n        _;\\n    }\\n\\n    modifier mustHaveEnoughLiquidity(uint256 amount) {\\n        if (getAvailableLiquidity() < amount) {\\n            revert NoMoreLiquidity(amount, getAvailableLiquidity());\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 token,\\n        address bridge,\\n        address liquidityProvider\\n    ) Pool(token, TokenPoolType.LockRelease, bridge) {\\n        if (liquidityProvider != address(0)) {\\n            s_liquidityProvider = liquidityProvider;\\n            emit LiquidityProviderSet(\\n                address(0),\\n                liquidityProvider,\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILockReleaseTokenPool\\n     */\\n    function setLiquidityProvider(\\n        address liquidityProvider\\n    ) external onlyOwner {\\n        if (liquidityProvider == address(0)) {\\n            revert LiquidityProviderAddressZero();\\n        }\\n        address oldLiquidityProvider = s_liquidityProvider;\\n        if (oldLiquidityProvider != liquidityProvider) {\\n            s_liquidityProvider = liquidityProvider;\\n            emit LiquidityProviderSet(\\n                oldLiquidityProvider,\\n                liquidityProvider,\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILockReleaseTokenPool\\n     */\\n    function removeLiquidityProvider() external onlyOwner {\\n        address oldLiquidityProvider = s_liquidityProvider;\\n        if (oldLiquidityProvider != address(0)) {\\n            delete s_liquidityProvider;\\n            emit LiquidityProviderSet(\\n                oldLiquidityProvider,\\n                address(0),\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    function _lockOrBurn(uint256 amount) internal override {\\n        uint256 newLiquidity = i_token.balanceOf(address(this)) -\\n            s_cachedLiquidity;\\n        if (amount > newLiquidity) {\\n            revert NoAmountToLock(amount, msg.sender);\\n        }\\n        _syncLiquidity();\\n        emit Locked(msg.sender, amount);\\n    }\\n\\n    function _releaseOrMint(\\n        uint256 amount,\\n        address receiver\\n    ) internal override mustHaveEnoughLiquidity(amount) {\\n        i_token.safeTransfer(receiver, amount);\\n        _syncLiquidity();\\n        emit Released(msg.sender, receiver, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockReleaseTokenPool\\n     */\\n    function provideLiquidity(uint256 amount) external onlyLiquidityProvider {\\n        i_token.safeTransferFrom(msg.sender, address(this), amount);\\n        _syncLiquidity();\\n        emit LiquidityProvided(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockReleaseTokenPool\\n     */\\n    function withdrawLiquidity(\\n        uint256 amount\\n    ) external onlyLiquidityProvider mustHaveEnoughLiquidity(amount) {\\n        i_token.safeTransfer(msg.sender, amount);\\n        _syncLiquidity();\\n        emit LiquidityWithdrawn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc ILockReleaseTokenPool\\n     */\\n    function getLiquidityProvider()\\n        external\\n        view\\n        returns (address liquidityProvider)\\n    {\\n        liquidityProvider = s_liquidityProvider;\\n    }\\n\\n    /**\\n     * @inheritdoc ILockReleaseTokenPool\\n     */\\n    function getAvailableLiquidity() public view returns (uint256 liquidity) {\\n        return i_token.balanceOf(address(this));\\n    }\\n\\n    function _syncLiquidity() private {\\n        s_cachedLiquidity = i_token.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x2c2494e0f24a9ebbf47238f4f46ea3f82ac3b6a5f08310ce09e20b036c628cf1\",\"license\":\"MIT\"},\"contracts/pools/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPool} from \\\"../interfaces/IPool.sol\\\";\\nimport {Ownable2Step, Ownable} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nabstract contract Pool is IPool, Ownable2Step {\\n    IERC20 internal immutable i_token;\\n    TokenPoolType internal immutable i_tokenPoolType;\\n    address internal s_bridge;\\n\\n    modifier onlyBridge() {\\n        if (msg.sender != s_bridge) {\\n            revert IsNotBridge(msg.sender, s_bridge);\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 token,\\n        TokenPoolType tokenPoolType,\\n        address bridge\\n    ) Ownable(msg.sender) {\\n        i_token = token;\\n        i_tokenPoolType = tokenPoolType;\\n        if (bridge != address(0)) {\\n            s_bridge = bridge;\\n            emit BridgeSet(address(0), bridge, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function setBridge(address bridge) external onlyOwner {\\n        if (bridge == address(0)) {\\n            revert BridgeAddressZero();\\n        }\\n        address oldBridge = s_bridge;\\n        if (oldBridge != bridge) {\\n            s_bridge = bridge;\\n            emit BridgeSet(oldBridge, bridge, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function removeBridge() external onlyOwner {\\n        address oldBridge = s_bridge;\\n        if (oldBridge != address(0)) {\\n            delete s_bridge;\\n            emit BridgeSet(oldBridge, address(0), msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function getBridge() external view returns (address bridge) {\\n        bridge = s_bridge;\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function getToken() external view returns (IERC20 token) {\\n        token = i_token;\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function getTokenPoolType()\\n        external\\n        view\\n        returns (TokenPoolType tokenPoolType)\\n    {\\n        tokenPoolType = i_tokenPoolType;\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function lockOrBurn(uint256 amount) external onlyBridge {\\n        _lockOrBurn(amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IPool\\n     */\\n    function releaseOrMint(\\n        uint256 amount,\\n        address receiver\\n    ) external onlyBridge {\\n        _releaseOrMint(amount, receiver);\\n    }\\n\\n    function _lockOrBurn(uint256 amount) internal virtual;\\n\\n    function _releaseOrMint(uint256 amount, address receiver) internal virtual;\\n}\\n\",\"keccak256\":\"0x58a745ed76b3ad83689f8abf22b47e4a013054ece1502b56d67d02be954d176f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063e30c397811610071578063e30c39781461024b578063e624c4bc1461025c578063eb521a4c1461026f578063eef929b714610282578063f2fde38b1461028a57600080fd5b80638da5cb5b146101fb5780638dd148021461020c5780639b745aec1461021f578063d569b55c14610227578063e2a72cce1461023a57600080fd5b806321df0da7116100f457806321df0da714610184578063503c2858146101aa57806364c0b2eb146101bd578063715018a6146101eb57806379ba5097146101f357600080fd5b80630a861f2a146101265780630fffbaf31461013b5780631a6f4f9d146101655780631acceb981461017c575b600080fd5b610139610134366004610d2a565b61029d565b005b6002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61016e60045481565b60405190815260200161015c565b610139610393565b7f0000000000000000000000000000000000000000000000000000000000000000610148565b6101396101b8366004610d2a565b6103f9565b7f000000000000000000000000000000000000000000000000000000000000000060405161015c9190610d43565b610139610442565b610139610456565b6000546001600160a01b0316610148565b61013961021a366004610d87565b610497565b61016e61052f565b610139610235366004610da2565b6105bf565b6003546001600160a01b0316610148565b6001546001600160a01b0316610148565b61013961026a366004610d87565b610609565b61013961027d366004610d2a565b6106a0565b610139610755565b610139610298366004610d87565b6107ba565b6003546001600160a01b031633146102e25760035460405163013910e560e01b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b80806102ec61052f565b101561031d57806102fb61052f565b604051638afa05b760e01b8152600481019290925260248201526044016102d9565b6103516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338461082b565b61035961088f565b60405182815233907fb1cce8684b4ffa8667b4577654e61ee3480d661ee9c27522ac80e211f6bd4d25906020015b60405180910390a25050565b61039b61091c565b6002546001600160a01b031680156103f657600280546001600160a01b031916905560405133906000906001600160a01b038416907f89471ea472ebde5b139ae048d7199129059cd8b03c7480c88e7048ca67dde5e1908390a45b50565b6002546001600160a01b031633146104395760025460405163f5e5683760e01b81523360048201526001600160a01b0390911660248201526044016102d9565b6103f681610949565b61044a61091c565b6104546000610a4a565b565b60015433906001600160a01b0316811461048e5760405163118cdaa760e01b81526001600160a01b03821660048201526024016102d9565b6103f681610a4a565b61049f61091c565b6001600160a01b0381166104c657604051637fc2831760e01b815260040160405180910390fd5b6002546001600160a01b03908116908216811461052b57600280546001600160a01b0319166001600160a01b0384811691821790925560405133928416907f89471ea472ebde5b139ae048d7199129059cd8b03c7480c88e7048ca67dde5e190600090a45b5050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190610dce565b905090565b6002546001600160a01b031633146105ff5760025460405163f5e5683760e01b81523360048201526001600160a01b0390911660248201526044016102d9565b61052b8282610a63565b61061161091c565b6001600160a01b03811661063857604051637efde79360e01b815260040160405180910390fd5b6003546001600160a01b03908116908216811461052b57600380546001600160a01b0319166001600160a01b0384811691821790925560405133928416907fae2f80e594729d524205a499426a28812b53809921de1259ca33dac753a92bd390600090a45050565b6003546001600160a01b031633146106e05760035460405163013910e560e01b81523360048201526001600160a01b0390911660248201526044016102d9565b6107156001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084610afd565b61071d61088f565b60405181815233907fccb2ae3a2936bf4c94fa4e12cdf0cdad6ed0e4888a044cef89afa60f2e4b92d39060200160405180910390a250565b61075d61091c565b6003546001600160a01b031680156103f657600380546001600160a01b031916905560405133906000906001600160a01b038416907fae2f80e594729d524205a499426a28812b53809921de1259ca33dac753a92bd3908390a450565b6107c261091c565b600180546001600160a01b0383166001600160a01b031990911681179091556107f36000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040516001600160a01b0383811660248301526044820183905261088a91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610b3c565b505050565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109179190610dce565b600455565b6000546001600160a01b031633146104545760405163118cdaa760e01b81523360048201526024016102d9565b600480546040516370a0823160e01b815230928101929092526000917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190610dce565b6109e49190610de7565b905080821115610a105760405163524507bf60e01b8152600481018390523360248201526044016102d9565b610a1861088f565b60405182815233907f9f1ec8c880f76798e7b793325d625e9b60e4082a553c98f42b6cda368dd6000890602001610387565b600180546001600160a01b03191690556103f681610b9f565b8180610a6d61052f565b1015610a7c57806102fb61052f565b610ab06001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838561082b565b610ab861088f565b6040518381526001600160a01b0383169033907f2d87480f50083e2b2759522a8fdda59802650a8055e609a7772cf70c07748f529060200160405180910390a3505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610b369186918216906323b872dd90608401610858565b50505050565b6000610b516001600160a01b03841683610bef565b90508051600014158015610b76575080806020019051810190610b749190610e08565b155b1561088a57604051635274afe760e01b81526001600160a01b03841660048201526024016102d9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060610bfd83836000610c06565b90505b92915050565b606081471015610c2b5760405163cd78605960e01b81523060048201526024016102d9565b600080856001600160a01b03168486604051610c479190610e2a565b60006040518083038185875af1925050503d8060008114610c84576040519150601f19603f3d011682016040523d82523d6000602084013e610c89565b606091505b5091509150610c99868383610ca5565b925050505b9392505050565b606082610cba57610cb582610d01565b610c9e565b8151158015610cd157506001600160a01b0384163b155b15610cfa57604051639996b31560e01b81526001600160a01b03851660048201526024016102d9565b5080610c9e565b805115610d115780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b600060208284031215610d3c57600080fd5b5035919050565b6020810160028310610d6557634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160a01b0381168114610d8257600080fd5b919050565b600060208284031215610d9957600080fd5b610bfd82610d6b565b60008060408385031215610db557600080fd5b82359150610dc560208401610d6b565b90509250929050565b600060208284031215610de057600080fd5b5051919050565b81810381811115610c0057634e487b7160e01b600052601160045260246000fd5b600060208284031215610e1a57600080fd5b81518015158114610c9e57600080fd5b6000825160005b81811015610e4b5760208186018101518583015201610e31565b50600092019182525091905056fea264697066735822122057f3cf88d2cad9b46f8be6cf9f5efba1894b83fc03dfe0113c9ca6723d2cb5aa64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "getAvailableLiquidity()": {
        "returns": {
          "liquidity": "The available liquidity in the pool"
        }
      },
      "getBridge()": {
        "returns": {
          "bridge": "The bridge address"
        }
      },
      "getLiquidityProvider()": {
        "returns": {
          "liquidityProvider": "The liquidity provider address"
        }
      },
      "getToken()": {
        "returns": {
          "token": "The token of the pool"
        }
      },
      "getTokenPoolType()": {
        "returns": {
          "tokenPoolType": "The type of the token pool"
        }
      },
      "lockOrBurn(uint256)": {
        "params": {
          "amount": "The amount of tokens to lock or burn"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "provideLiquidity(uint256)": {
        "details": "Should transfer the liquidity from the sender to the pool. Emit LiquidityProvided event",
        "params": {
          "amount": "The amount of liquidity to provide"
        }
      },
      "releaseOrMint(uint256,address)": {
        "details": "For LockRelease token pool, if the pool is out of liquidity, it reverts.",
        "params": {
          "amount": "The amount of tokens to release or mint",
          "receiver": "The address to receive the released or minted tokens"
        }
      },
      "removeBridge()": {
        "details": "Emits the `BridgeSet` event with bridge as 0 address upon success."
      },
      "removeLiquidityProvider()": {
        "details": "Emits the `LiquidityProviderSet` event with liquidityProvider as 0 address upon success."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBridge(address)": {
        "details": "Emits the `BridgeSet` event upon success.",
        "params": {
          "account": "The account to set as the bridge."
        }
      },
      "setLiquidityProvider(address)": {
        "details": "Emits the `LiquidityProviderSet` event upon success.",
        "params": {
          "account": "The account to add as liquidity provider."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "withdrawLiquidity(uint256)": {
        "details": "Should transfer the liquidity from the pool to the sender. Emit LiquidityWithdrawn event",
        "params": {
          "amount": "The amount of liquidity to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAvailableLiquidity()": {
        "notice": "Returns the available liquidity in the pool."
      },
      "getBridge()": {
        "notice": "Returns the bridge address."
      },
      "getLiquidityProvider()": {
        "notice": "Returns the liquidity provider."
      },
      "getToken()": {
        "notice": "Returns the token of the pool."
      },
      "getTokenPoolType()": {
        "notice": "Returns the type of the token pool."
      },
      "lockOrBurn(uint256)": {
        "notice": "Locks or burns the amount of tokens.The caller must have the role of locker for LockRelease token pool or burner for BurnMint token pool."
      },
      "provideLiquidity(uint256)": {
        "notice": "/**Provides liquidity to the pool. Can only be called by a liquidity provider"
      },
      "releaseOrMint(uint256,address)": {
        "notice": "Releases or mints the amount of tokens.The caller must have the role of unlocker for LockRelease token pool or minter for BurnMint token pool."
      },
      "removeBridge()": {
        "notice": "Removes the bridge. Only callable by the owner."
      },
      "removeLiquidityProvider()": {
        "notice": "Removes current liquidity provider. Only callable by the owner."
      },
      "setBridge(address)": {
        "notice": "Sets `account` as the bridge. Only callable by the owner."
      },
      "setLiquidityProvider(address)": {
        "notice": "Set `account` as a liquidity provider. Only callable by the owner."
      },
      "withdrawLiquidity(uint256)": {
        "notice": "Withdraws liquidity from the pool. Can only be called by a liquidity provider"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/pools/LockReleaseTokenPool.sol:LockReleaseTokenPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/pools/LockReleaseTokenPool.sol:LockReleaseTokenPool",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8766,
        "contract": "contracts/pools/LockReleaseTokenPool.sol:LockReleaseTokenPool",
        "label": "s_bridge",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8430,
        "contract": "contracts/pools/LockReleaseTokenPool.sol:LockReleaseTokenPool",
        "label": "s_liquidityProvider",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8432,
        "contract": "contracts/pools/LockReleaseTokenPool.sol:LockReleaseTokenPool",
        "label": "s_cachedLiquidity",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}